package com.example.bankingApp.service;


import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import java.util.HashMap;
import java.util.Map;

@Service
public class UserInfoService implements UserDetailsService {

    private final PasswordEncoder passwordEncoder;

    // Simulated user data; replace with a database or other storage in production
    private static final Map<String, UserDetails> USERS = new HashMap<>();

    public UserInfoService(PasswordEncoder passwordEncoder) {
        this.passwordEncoder = passwordEncoder;
        initializeUsers();
    }

    private void initializeUsers() {
        USERS.put("maker", User.builder()
                .username("maker")
                .password(passwordEncoder.encode("password123"))
                .roles("MAKER")
                .build());

        USERS.put("checker", User.builder()
                .username("checker")
                .password(passwordEncoder.encode("password123"))
                .roles("CHECKER")
                .build());

        USERS.put("authorizer", User.builder()
                .username("authorizer")
                .password(passwordEncoder.encode("password123"))
                .roles("AUTHORIZER")
                .build());
    }

    @Override
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
        UserDetails user = USERS.get(username);

        if (user == null) {
            throw new UsernameNotFoundException("User not found: " + username);
        }

        return user;
    }
}
