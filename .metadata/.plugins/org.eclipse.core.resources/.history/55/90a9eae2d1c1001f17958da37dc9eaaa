package com.example.bank.controller;

import com.example.bank.dto.AccountInfoDTO;
import com.example.bank.model.Account;
import com.example.bank.service.AccountService;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/api/accounts")
@RequiredArgsConstructor
public class AccountController {
    private final AccountService accountService;

    @PostMapping
    public ResponseEntity<Account> createAccount(@RequestBody Account account) {
        Account createdAccount = accountService.createAccount(account);
        return ResponseEntity.ok(createdAccount);
    }

    @GetMapping("/customer/{customerId}")
    public ResponseEntity<List<AccountInfoDTO>> getAccountsByCustomerId(@PathVariable Long customerId) {
        List<Account> accounts = accountService.getAccountsByCustomerId(customerId);
        List<AccountInfoDTO> accountInfoDTOs = accounts.stream()
                .map(account -> new AccountInfoDTO(
                        account.getAccountId(),
                        account.getCustomer().getCustomerId(),
                        account.getOpeningBalance(),
                        account.getClosingBalance()))
                .collect(Collectors.toList());
        return ResponseEntity.ok(accountInfoDTOs);
    }

    @GetMapping("/{accountId}")
    public ResponseEntity<AccountInfoDTO> getAccountById(@PathVariable Long accountId) {
        Account account = accountService.getAccountById(accountId);
        AccountInfoDTO accountInfoDTO = new AccountInfoDTO(
                account.getAccountId(),
                account.getCustomer().getCustomerId(),
                account.getOpeningBalance(),
                account.getClosingBalance());
        return ResponseEntity.ok(accountInfoDTO);
    }

    @GetMapping("/number/{accountNumber}")
    public ResponseEntity<Object> getAccountInfoByAccountNumber(@PathVariable String accountNumber) {
        Optional<Account> accountOpt = accountService.getAccountByAccountNumber(accountNumber);
        if (accountOpt.isPresent()) {
            Account account = accountOpt.get();
            AccountInfoDTO accountInfoDTO = new AccountInfoDTO(
                    account.getAccountId(),
                    account.getCustomer().getCustomerId(),
                    account.getOpeningBalance(),
                    account.getClosingBalance());
            return ResponseEntity.ok(accountInfoDTO);
        } else {
            return ResponseEntity.status(404).body("Account not found");
        }
    }
}
