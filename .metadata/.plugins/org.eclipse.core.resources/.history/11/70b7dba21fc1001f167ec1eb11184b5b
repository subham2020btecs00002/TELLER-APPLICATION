package com.example.bank.service;

import com.example.bank.model.Transaction;
import com.example.bank.model.Account;
import com.example.bank.repository.TransactionRepository;
import com.example.bank.repository.AccountRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

@Service
@RequiredArgsConstructor
public class TransactionService {
    private final TransactionRepository transactionRepository;
    private final AccountRepository accountRepository;

    public Transaction createTransaction(Transaction transaction) {
        // Fetch the account based on account number or ID
        Account account = transaction.getAccount();
        double amount = transaction.getAmount();
        String type = transaction.getType();

        // Update account balance based on transaction type (deposit or withdrawal)
        if ("DEPOSIT".equals(type)) {
            account.setClosingBalance(account.getClosingBalance() + amount);
        } else if ("WITHDRAWAL".equals(type)) {
            if (account.getClosingBalance() < amount) {
                throw new RuntimeException("Insufficient balance for withdrawal");
            }
            account.setClosingBalance(account.getClosingBalance() - amount);
        }

        // Save the transaction to the repository
        transactionRepository.save(transaction);
        accountRepository.save(account); // Save the updated account balance
        return transaction;
    }
}
