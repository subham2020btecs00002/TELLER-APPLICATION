package com.example.bank.service;

import java.time.LocalDateTime;

import org.springframework.stereotype.Service;

import com.example.bank.dto.TransactionRequest;
import com.example.bank.model.Account;
import com.example.bank.model.Transaction;
import com.example.bank.repository.AccountRepository;
import com.example.bank.repository.TransactionRepository;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class TransactionService {

    private final AccountRepository accountRepository;
    private final TransactionRepository transactionRepository;

    public void deposit(TransactionRequest request) {
        Account account = accountRepository.findById(request.getAccountId())
                .orElseThrow(() -> new RuntimeException("Account not found"));

        account.setClosingBalance(account.getClosingBalance() + request.getAmount());

        Transaction transaction = new Transaction();
        transaction.setAmount(request.getAmount());
        transaction.setType("Deposit");
        transaction.setTimestamp(LocalDateTime.now());
        transaction.setAuthorized(true);
        transaction.setAccount(account);

        transactionRepository.save(transaction);
        accountRepository.save(account);
    }

    public void withdraw(TransactionRequest request) {
        Account account = accountRepository.findById(request.getAccountId())
                .orElseThrow(() -> new RuntimeException("Account not found"));

        if (account.getClosingBalance() < request.getAmount()) {
            throw new RuntimeException("Insufficient balance");
        }

        account.setClosingBalance(account.getClosingBalance() - request.getAmount());

        Transaction transaction = new Transaction();
        transaction.setAmount(request.getAmount());
        transaction.setType("Withdrawal");
        transaction.setTimestamp(LocalDateTime.now());
        transaction.setAuthorized(request.getAmount() <= 1000);
        transaction.setAccount(account);

        transactionRepository.save(transaction);
        accountRepository.save(account);
    }

    public void authorizeTransaction(Long transactionId) {
        Transaction transaction = transactionRepository.findById(transactionId)
                .orElseThrow(() -> new RuntimeException("Transaction not found"));

        transaction.setAuthorized(true);
        transactionRepository.save(transaction);
    }
}
