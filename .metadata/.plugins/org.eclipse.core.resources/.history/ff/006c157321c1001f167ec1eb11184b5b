package com.example.bank.service;

import com.example.bank.model.Account;
import com.example.bank.repository.AccountRepository;
import com.example.bank.repository.TransactionRepository;

import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

@Service
@RequiredArgsConstructor
public class AccountService {
    private final AccountRepository accountRepository;
    private final TransactionRepository transactionRepository;

    public List<Account> getAccountsByCustomerId(Long customerId) {
        return accountRepository.findByCustomerCustomerId(customerId);
    }
    public Account createAccount(Account account) {
        return accountRepository.save(account);
    }

    public Account getAccountById(Long accountId) {
        return accountRepository.findById(accountId).orElseThrow(() -> new RuntimeException("Account not found"));
    }
    public Optional<Account> getAccountByAccountNumber(String accountNumber) {
        return accountRepository.findByAccountNumber(accountNumber);
    }
    public void updateAccountBalance(Account account, double amount, String type) {
        if ("DEPOSIT".equals(type)) {
            account.setClosingBalance(account.getClosingBalance() + amount);
        } else if ("WITHDRAWAL".equals(type)) {
            if (account.getClosingBalance() >= amount) {
                account.setClosingBalance(account.getClosingBalance() - amount);
            } else {
                throw new RuntimeException("Insufficient balance");
            }
        }
        accountRepository.save(account);
    }


}
